<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on zsh&#39;blog</title>
    <link>https://ursasi.github.io/post/</link>
    <description>Recent content in Posts on zsh&#39;blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Oct 2023 10:15:19 +0800</lastBuildDate><atom:link href="https://ursasi.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>换位思考与信息差</title>
      <link>https://ursasi.github.io/post/%E6%8D%A2%E4%BD%8D%E6%80%9D%E8%80%83%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%AE/</link>
      <pubDate>Thu, 19 Oct 2023 10:15:19 +0800</pubDate>
      
      <guid>https://ursasi.github.io/post/%E6%8D%A2%E4%BD%8D%E6%80%9D%E8%80%83%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%AE/</guid>
      <description>换位思考如同su，信息差在于su - 的 -</description>
    </item>
    
    <item>
      <title>关于Raft</title>
      <link>https://ursasi.github.io/post/%E5%85%B3%E4%BA%8Eraft/</link>
      <pubDate>Mon, 16 Oct 2023 20:10:29 +0800</pubDate>
      
      <guid>https://ursasi.github.io/post/%E5%85%B3%E4%BA%8Eraft/</guid>
      <description>聊聊关于 Raft 与分布式系统 本文均为个人理解与思考，如有错误欢迎指出，zshprint@gmail.com
分布式系统的美好愿景 随着近代社会计算机技术的发展，摩尔定律的失效反而促进了分布式系统的发展。为了获取单节点服务器不曾拥有的极高性能，一种朴素的想法由此产生，即将多台廉价的服务器组合起来，形成一个“巨大的服务器”，对外它们表现为同一种状态，客户端无需考虑其内的运行规则，与使用单节点服务别无而样，在提高系统性能的同时屏蔽底层的复杂。
然而，经验告诉我们大型系统的高层次抽象往往都意味着在其内部存在着难以想象的问题与规则，事实的确如此，分布式系统存在诸多问题，数据一致性问题、脑裂问题、网络分区问题、可用性问题&amp;hellip;&amp;hellip; CAP、BASE理论在此不多赘述。总之岁月静好之外，分布式系统的背负远比想象的深刻复杂。
横空出世 横空出世，莽昆仑，阅尽人间春色
契机对于任何东西都一样重要，Raft 的出现有必然性也有偶然性，一方面人们迫切地想要一个更好的分布式系统方案，任何一部分的改进都鼓舞人心。另一方面诸多科技巨头所提出的方案的假设过于大胆，与实际的极为糟糕的网络链路(《深入理解分布式系统》中指任意链路)大相径庭。另外很重要的一点就是1998年 Leslie Lamport 提出Paxos用起来真的太难了。
对比前者 Bully Paxos
单点故障 Google、VMware 等大型科技公司在分布式系统方面的诸多建树引起了业界的关注，MapReduce、GFS、Replication-backup 成为行业竞相模仿的典范。诸如此类的产品不约而同地采用了单个 Master 节点的设计，这种实现简单、逻辑清晰，合理的假设往往能够瞬间降低复杂度。然而单个 Master 节点极大可能会发生故障，（你认为会出问题的地方一定会出问题），单个 Master 一旦发生故障，整个分布式系统都会崩溃，这是必然——单点故障成为了大型分布式系统最薄弱的一环。
如何解决 单点故障对于所有节点都完全一样，单点故障普遍且不应该感到害怕，大型集群的故障时间受到每一台服务器的操作系统、网络、硬盘、内存故障的影响。良好的运维方法有助于故障尽可能少的出现，相比之下考虑在 Master 单点故障发生时，系统采取那种做法转移 Master 节点更为重要。
节点选举就是一种类人类社会的方法，通过节点之间的通信，节点达成共识共同臣服于一个 Master，这种方法原始且高效。如何让多个节点达成共识，业内有很多种不同的实践方法。主要可分为两大类，
基于序号的选举方式（Bully） 多数派算法（Raft、ZAB） 是什么，不是什么 是算法，不是软件 Raft有很多实现，并且运用在很多领域，但这并不意味着Raft是一个软件，他是一种算法，一种设计，一种方法。 是共识算法，不是一致性算法 在 Paxos 论文中全文没有 Consistency，但出现了 Consensus，在 Raft 的论文中，Abstract的第一句话就是 Raft is a consensus algorithm Consensus 还是 Consistency ？连百度百科也称 Raft 为一致性算法，你可能说 Raft 在日志复制的时候能够保证一致性，但我仍不认为是一致性算法，并且Raft翻译就是木筏，木筏的每个板都是长短不一的，说他们是数据一致的实在有失公允。这也可能是计算机领域被翻译者误传最广、最深刻的概念。我认为共识算法侧重点在于达成对某一事物的共同认知，一致性算法则侧重于在于数据在经过某一时刻状态的变化在遵循一致性规则之后应该能被预测。 All in Raft Raft 的选举 规则：
leader 会周期性给跟随者发送心跳 跟随者接收到心跳信号之后要回应，“收到”，重置自己的随机时间 随机时间之内没有收到心跳信号，宣布新任期，让其他人投票给自己，自己投自己 每个节点每轮选举只有一张选票，投票的时候，先来后到，拒绝任期小的请求 任期相同，选择日志完整性最高的 收到选票的时候，比较任期大小，更新成大的任期 选举时间内，收到超过一半的选票就胜选，否则落选 选举上了，就周期发心跳，重置其他节点的随机时间 没选举上，取消任期 通讯类型:</description>
    </item>
    
    <item>
      <title>谈谈锁的五大问题与AQS</title>
      <link>https://ursasi.github.io/post/%E8%B0%88%E8%B0%88%E9%94%81%E7%9A%84%E4%BA%94%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B8%8Eaqs/</link>
      <pubDate>Fri, 13 Oct 2023 12:24:54 +0800</pubDate>
      
      <guid>https://ursasi.github.io/post/%E8%B0%88%E8%B0%88%E9%94%81%E7%9A%84%E4%BA%94%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B8%8Eaqs/</guid>
      <description>现代操作系统为程序提供了多种多样的简单易用的锁操作，方便程序开发者利用它们进行并发控制。然而，这种抽象在的提高设计语言灵活性的同时屏蔽了底层设计，不同语言的设计思路往往不同，了解它们的异同有利于理解并发模型，将其更好地运用在并发编程中，避免一叶障目，不见泰山。
每种语言对于锁的抽象程度不同，采用的锁模型与相应的机制也不尽相同，导致关于锁的概念众多，纷繁复杂。本文将锁的设计总结为五大问题，分别是锁表示问题、获取/释放问题、阻塞挂起问题、阻塞唤醒问题、线程存储问题。搞清楚五大问题有利于理解锁设计的相关思想。最后本文将会以Go、Java的锁模型举例分析它们的异同，且着重梳理Java中AQS的设计方法与理念。
问题之间的关系 总体来讲，五大问题关系到锁本身的存在（表示问题）、锁如何获取/释放、阻塞的时候如何挂起、释放的时候如何唤醒线程、线程存放在哪里。这些问题本身按照线程与锁的生命周期息息相关，按照顺序，它们的关系如下图所示。
锁表示 获取与释放 获取 释放 阻塞 挂起 唤醒 线程存储 </description>
    </item>
    
    <item>
      <title>校园网环境连接机房、实验室网盘、执行打印任务</title>
      <link>https://ursasi.github.io/post/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E8%BF%9E%E6%8E%A5%E6%9C%BA%E6%88%BF%E5%AE%9E%E9%AA%8C%E5%AE%A4%E7%BD%91%E7%9B%98%E6%89%A7%E8%A1%8C%E6%89%93%E5%8D%B0%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Thu, 12 Oct 2023 10:22:48 +0800</pubDate>
      
      <guid>https://ursasi.github.io/post/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E8%BF%9E%E6%8E%A5%E6%9C%BA%E6%88%BF%E5%AE%9E%E9%AA%8C%E5%AE%A4%E7%BD%91%E7%9B%98%E6%89%A7%E8%A1%8C%E6%89%93%E5%8D%B0%E4%BB%BB%E5%8A%A1/</guid>
      <description>本说明针对于整个校园网环境。
如果没有全校园网环境内连接需求，仅仅在实验室连接机房、网盘、打印机，无需以下配置。
前提条件 连接 WiFi：SSID：nuaa.wifi6/nuaawifi-2.4g 进行统一身份认证。
安装 WireGuard WireGuard 是一种现代、高性能的虚拟专用网络协议。它旨在提供简单、安全、高效的网络连接，适用于各种操作系统和设备。
WireGuard 提供多种终端安装程序
官方地址 ：https://www.wireguard.com/install/
包含但不限于 Windows、MacOS、Android、iOS、Ubuntu。
Windows、Android 常见Windows、Android安装包已经放置于 DSM/Share/WireGuard/install 文件夹下
macOS、iOS MacOS、iOS 需要外区 Apple 账号登录 App Store
目前可用的外区 Apple 账号如下：
TODO：外区账号搜集
配置 WireGuard 已经为部分实验室成员生成对应的了 WireGuard 的配置文件，其放置于DSM/Share/WireGuard/config，格式为 周杰伦-NUAA.conf 还没有配置文件的成员如有需要可以请求生成。
Windows macOS Android iOS 连接机房 第一次连接机房机器需要启动虚拟机，联系网管开启。
Windows macOS 连接实验室打印机 连接方式与在实验室环境下连接打印机方式类似，但添加打印纸需要通过IP添加。
Windows macOS Android iOS 连接实验室网盘 连接方式与在实验室环境下连接网盘方式类似，但需要通过IP进行添加。
为方便管理，请在网盘中以姓名拼音首字母缩写创建个人文件夹，例如周杰伦→ZJL 所有文件夹均无权限管理，切勿存放私密文件 Windows macOS Android iOS </description>
    </item>
    
  </channel>
</rss>
